AOP (Aspect Oriented Programming):
---------------------------------

AOP is methodology of programming that makes programmer to saparate primary logic of application from the secondary or heiper logics.

=> AOP is not replacement for oops more ever it complement oop.

=> IN oop we develop business metods become heavy and the reusablilty of secondary logics due to this business methods become heavy and the reusability of secondary logics will be killed and we cannot enable or disable secondary logics without touching source code of business methods

=> To overcome above problem method use AOP that the makes the programmer to write primary logics in separate class and secondary logics in separate class and  allows to mix and bind both logics dynamically at runtime by genarateing new classes.

oop example:
-----------

class Bank{
//security logic
//logging logic
//transactin logic  --above are secondary logic

bal=bal-amount;//primary logic

}
pbulic boolean deposite (int account , int amt){

//security logic
//logging logic
//transaction logic  --above are secondary logic

bal=bal+amt;//primarylogic


}



AOP:
----
class Bank{
withdraw(accno, amt){
bal=bal-amt; //primary logic
}
deposit(accno, amt){
bal=bal+amt;//primary logic

}
}


class security{

----
}

class Logging{
----

}

=> That logic tha is minimum to create the task is called the primary logic. without primary logic task will not be completed.

=> The logic that supports primary logic and makes primary logic as better logic but optional to have in tha appliction is called secondary logic.security, logging, transaction etc.

=> while performing withdraw amount operaton deducting amount from balance  is called primary logic.
=> checking the identity of user , logging auting and etc are called secondary logics . since we need secondary logic in multiple compenent classes of application or project they can be also called cross cutting concerns because they need to be applied across the multiple classes.

=> For Example scenario that speaks about nee of AOP wit bank account use case
=> AOP is not replacement of OOP, moreever it complements oop. the key component in oop is class. the key component in AOP Aspect (cross cutting that represents secondary logics)
=> The language that is desined based on OOP principles like abstraction, encapsultion , inheritance and ectd .. is called oop enable language

=> similarly to oops principles we also have AOP Prinicples . the software that supports and implements AOP principles is called AOP enable software. AOP is not jus tspecific to spring . There are mulitple AOP enabled software like spring AOP, Aspect AOP , JBOSS AOP, JAC (Java Aspect component) Mozilla AOP and etc.

AOP Prinicple/Terminalogies:
----------------------------

1. Aspect
2. JOINPOINT
3..ADVICE
4. POINTCUT
5.TARGETCLASS
6. WEAVING /ASPECT WEAVING
7. PROXY CLASS

ASPECT:
----
The logics that has to be applied across the multiple classes of application is called aspect  .this logics is also called as crosscutting concerns , secondary logic, middleware service logic. 
ex: security , logging , transaction and etc.

or

Teh service or secondary logic that we want to apply


JoinPoint:
----------
 The possible points in classes on which aspect logics can be applied is called joinpoints. they are like fields constructors , methods and etc.

Spring supports only mehtods as joinpoint.
or
the places in target class where we can apply Aspects

Advice:
------
it spricifies or indicates an how aspect should be applied on which joinpoint like applying aspect before executing method or appling at the end of method and etc..

or 
Indicates how an aspect should be applied on Joinpoints

there are 4 types of advices lik:
  1 before advice
  2. after advice
  3. throws advice
   4. around advice

pointcut:
--------
 it is collection of joinpoint  on which aspects are adviced (i.e aspect are configured)

or
The collection of joinpoints where aspects are configured for advicing (Where want to apply aspects).

Target class:
------------
 The class on which we want to advice the aspects . it is pre-AOP java class having primarly logics in methods . if we call methods of target class only primary logic will be execute.

or

Pre AOP Class

Weaving:
------
Te process of advising we want to advicing aspects on the target class to build proxy class is called weaving. it is all about comibing multiple things to build one 1 proxy class.

or 

The process of generating proxy class


 proxy class:
------------
=> The outcome class os weaving process where primary logcs and secondary logics aspects will be mixe up dynamically at runtime. It is post AOP class. if we call methods on proxy class object the primary logic will be executed along with secondary logic. 
=> Aspect weaver is an uint of AOP framework like spring AOP, AspectjAop, and etc. it uses some runtime libralies lik jdk libraries or cglib libraries to generate procxy classes throguth weaving .

=>  This proxy clasess are dynamically generated inmemeory classes.

or 
outcome of weaving or post aop class called proxy class.


AOP Projects:
-----------------

  Procedure to develop spring AOP Application in Declarative Approach:
             1. Develop target class having method wiht primary logic
             2. Develop Aspect/advice class having secondary logic
             3. perform configuratins in spring bean configurations file for weaving 
                      1. Configuration target class
                      2. Aspect/advice class
                      3. Configure proxyFactoryBean class supplying target , aspect classes to generate proxy class through weaving

            4. devlope ClientApp for testing
                      1. create IOC container
                      2. Get proxy class object by supplying the bean id of ProxyFactoryBean
                     3. Call target class methods on proxy object.

 

AOPProj1(Spring AOP-Decl-AroundAdvice)
     |---src
            |------------com.nt.aspect
                                  |-----CacheAdvice.java
                                         LogAroundAdvice.java
                                         PerformanceMonitoringAdvice.java
            |------------com.nt.cfgs
                                 |-------applicationContext.xml
            |-----------com.nt.service
                                   |------IntrAmtCalclator.java
            |-----------com.nt.test
                                   |------ClientApp.java



=> when working with AOP our target class must not be final and target class methods, must not be static , final , because it gives problem towards proxy class by extending from target class and overriding target class methods in proxy class.
=> it is always recommanded to take separate class for every cross cutting (Secondary) logic. It better not mixup multiple logics in a single class


The best use cases for around advice are--> 1. performance monitoring
                                           2. caching
                                          3. Around logging

=> cache / buffer is temporary memory that holds data for temporary period. in client server application the chache at clientside hods server app results and uses it across the mutiple same request to reduce network round trip between client and server.

=> In AOP programming we store target method result in chace and we use that across multiple same method calss with same arguments. we generally take either array./ collections (hashmap) as cache.

=> while configuring cache Aspect/advice along with other Aspects/advices it is recommended to configure then after cache advice becuase if target method is getting it's result from cache there is no need of perfoming logging , performance monitoring.

Proxy interface:
----------------
 => the interface that implement by target class is called proxy interface. it is actually called as proxy interface becuase the dynamically generated proxy class implements this interface. we need to configure this interface while configuring  "ProxyFactoryBean" class in xml file.

=> Once Proxy interface is configure in xml file the jdk libraries will be used to generate the proxy class dynamically , at runtime and this genrated proxy class does not extends from target class rather implements proxy inerface . Dueto this here we can take target class a final class and target methods as final methods.

Before Advice:
-------------
this advice executies before begining the execution of target method and once advice method is exectued then control automatically goes to target method.

=> after competeing the execution of target method control does not come back to before advice. 
        
         To develop before advice our class must implement methodBeforeAdvice(i) and should provide implementation to before(-,-,-) method

=> the use cases of before advice are auditing , security check and etc...

Method signature:
--------------
  public void before (Method method, Object args[i], Object target)

  Methd method: represents targetmethod
Object args[]:- reresents target class object

the important / control point of before Advice:
----------------------------------------------

1. can acces n modify target method arguments
2. can not acces modify target method return value becuase the controll doenot come back to before advice once the target method execution is completed.
3. can not control target method execution being from advice but can stop/abort target method execution by throwing execption in the before(-,-,-) method.
      -> Logging keep track of various components that are involvedin the flow of execution of app
     -> Auditing  keeps track of various activities that are taken palce in the execution of application


  AspectJAOP3(Before advice-Auditing)
         |---src
               |-----com.nt.aspect
                               |-----AuditingAdvice.java
               |-----com.nt.cfgs
                             |--------applicationContext.cfg
               |------com.nt.service
                               |------OrderApprover.java
               |------com.nt.test
                               |------ClientApp.java

 https://docs.spring.io/spring-framework/docs/2.0.x/reference/aop.html


Supported Pointcut Designators
Spring AOP supports the following AspectJ pointcut designators for use in pointcut expressions:
------------------------------------------------------------------------------------------------
Other pointcut types

The full AspectJ pointcut language supports additional pointcut designators that are not supported in Spring. These are: call, initialization, preinitialization, staticinitialization, get, set, handler, adviceexecution, withincode, cflow, cflowbelow, if, @this, and @withincode. Use of these pointcut designators in pointcut expressions interpreted by Spring AOP will result in an IllegalArgumentException being thrown.

The set of pointcut designators supported by Spring AOP may be extended in future releases both to support more of the AspectJ pointcut designators (e.g. "if"), and potentially to support Spring specific designators such as "bean" (matching on bean name).
------------------------------------------------------------------------------------------------------------
execution - for matching method execution join points, this is the primary pointcut designator you will use when working with Spring AOP

within - limits matching to join points within certain types (simply the execution of a method declared within a matching type when using Spring AOP)

this - limits matching to join points (the execution of methods when using Spring AOP) where the bean reference (Spring AOP proxy) is an instance of the given type

target - limits matching to join points (the execution of methods when using Spring AOP) where the target object (application object being proxied) is an instance of the given type

args - limits matching to join points (the execution of methods when using Spring AOP) where the arguments are instances of the given types

@target - limits matching to join points (the execution of methods when using Spring AOP) where the class of the executing object has an annotation of the given type

@args - limits matching to join points (the execution of methods when using Spring AOP) where the runtime type of the actual arguments passed have annotations of the given type(s)

@within - limits matching to join points within types that have the given annotation (the execution of methods declared in types with the given annotation when using Spring AOP)

@annotation - limits matching to join points where the subject of the join point (method being executed in Spring AOP) has the given annotation

Because Spring AOP limits matching to only method execution join points, the discussion of the pointcut designators above gives a narrower definition than you will find in the AspectJ programming guide. In addition, AspectJ itself has type-based semantics and at an execution join point both 'this' and 'target' refer to the same object - the object executing the method. Spring AOP is a proxy based system and differentiates between the proxy object itself (bound to 'this') and the target object behind the proxy (bound to 'target').
6.2.3.2. Combining pointcut expressions
Pointcut expressions can be combined using '&&', '||' and '!'. It is also possible to refer to pointcut expressions by name. The following example shows three pointcut expressions: anyPublicOperation (which matches if a method execution join point represents the execution of any public method); inTrading (which matches if a method execution is in the trading module), and tradingOperation (which matches if a method execution represents any public method in the trading module).

    @Pointcut("execution(public * *(..))")
    private void anyPublicOperation() {}
    
    @Pointcut("within(com.xyz.someapp.trading..*")
    private void inTrading() {}
    
    @Pointcut("anyPublicOperation() && inTrading()")
    private void tradingOperation() {}
It is a best practice to build more complex pointcut expressions out of smaller named components as shown above. When referring to pointcuts by name, normal Java visibility rules apply (you can see private pointcuts in the same type, protected pointcuts in the hierarchy, public pointcuts anywhere and so on). Visibility does not affect pointcut matching.

6.2.3.3. Sharing common pointcut definitions
When working with enterprise applications, you often want to refer to modules of the application and particular sets of operations from within several aspects. We recommend defining a "SystemArchitecture" aspect that captures common pointcut expressions for this purpose. A typical such aspect would look as follows:

package com.xyz.someapp;

import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;

@Aspect
public class SystemArchitecture {

  /**
   * A join point is in the web layer if the method is defined
   * in a type in the com.xyz.someapp.web package or any sub-package
   * under that.
   */
  @Pointcut("within(com.xyz.someapp.web..*)")
  public void inWebLayer() {}

  /**
   * A join point is in the service layer if the method is defined
   * in a type in the com.xyz.someapp.service package or any sub-package
   * under that.
   */
  @Pointcut("within(com.xyz.someapp.service..*)")
  public void inServiceLayer() {}

  /**
   * A join point is in the data access layer if the method is defined
   * in a type in the com.xyz.someapp.dao package or any sub-package
   * under that.
   */
  @Pointcut("within(com.xyz.someapp.dao..*)")
  public void inDataAccessLayer() {}

  /**
   * A business service is the execution of any method defined on a service
   * interface. This definition assumes that interfaces are placed in the
   * "service" package, and that implementation types are in sub-packages.
   * 
   * If you group service interfaces by functional area (for example, 
   * in packages com.xyz.someapp.abc.service and com.xyz.def.service) then
   * the pointcut expression "execution(* com.xyz.someapp..service.*.*(..))"
   * could be used instead.
   */
  @Pointcut("execution(* com.xyz.someapp.service.*.*(..))")
  public void businessService() {}
  
  /**
   * A data access operation is the execution of any method defined on a 
   * dao interface. This definition assumes that interfaces are placed in the
   * "dao" package, and that implementation types are in sub-packages.
   */
  @Pointcut("execution(* com.xyz.someapp.dao.*.*(..))")
  public void dataAccessOperation() {}

}

==========================================================================================
=> Security means authentiaction and authorization checking identity of a user is called authentication, Checking the access permissions is called authorization .
    security is mainly authentiation
=> We need to authentication the user before entering into target method / business method . so it is recommended to develop seurity logic as before advice logic

=> since target method call cannot supply username , password everythime. we need to maked client performing loging operation. submitting usernamae , password before calling target method. these username , password must must be saved temporarly to use them when real B.method/ target method is called for this we can use ThreadLocal object
=> if we want ot make data specific to each thread having global visibility whithout using local variable and synchronization concept then we can keep that data in ThreadLocal object that is taken as instance variable

=> this threadlocal object allows each thread to keep one object and doesnot allow other threads to access and use that object . so we can say that ThreadLocal object maintaining data in ThreadScope
  in java we can keep data in 4 scopes 
                                        1. local
                                        2. instance
                                         3. class
                                          4. ThreadLocal




=> Wihtout using synchronization concept if you want to maintain thread safe data having global visibility use thread local object. The data placed by one thread in thread local object only by that thread
       
           thread local object is internally a map collection having thrad name as key object as the value while operating ATM we give cardno, pin no, but they will not be used for authentication immediately. they will be actually used for authentication before perfroming serious business operation like withdraw , deposite and etc...

AOPProj4(SpringAOP-Decl_BeforeADvice_Security)
                   |------src
                           |-----------com.nt.aspect
                                                |------AuthenticationManager.java
                                                        SecurityAdvice.java
                                                        UserDetails.java
                            |------------com.nt.cfgs
                                                 |--------applicationContext.xml
                            |-----------com.nt.dao
                                                |---------AuthenticateDAO.java
                            |------------com.nt.service
                                                |-----IntrAmtCalculator.java
                            |----------com.nt.test
                                                 |---clientApp.java
               |------lib
                      |-----spring-jdbc.X.jar
                             spring-tx.x.jar
                             ojdbc.x.jar

After Advice/After Returning Advice:
------------------------------------
=> This advice method/Logic executes once target method finishes the execution and before it returns the control to control method.
=> This advice can catch the return value but cannot modify the retun value. To develop this advice we need to take a class implementing After Returning advice(i)  and should provide implementation for after returning(-,-,-) method.

=> public void after returning (Object retVal, Method method, Object args[], Object target)

Usecase:
-------
i. Generating discount vocucher for next purchage based on current purchage bill amount.
ii. ATM Pin genearation

Important points/Control points:
-----------------------------
a. we can access target method arguments but there is no use of modifying them becuase control comets to target method only after fininishing execution of target method.

b. cannot control target method execution becuasue control comes to advice method only after executin taget method. but by throwing exeception we can stop target method sending return value to caller method.

c. can access the return value but cannot modify return value if modify that will not reflect AOP is desinged based on decorator , proxy design patterns.



AOP Proj4 (SpringAOP_DEcl_AfterAdvice_Discount)
             |----------src
                         |----------com.nt.aspect
                                            |----------------DiscountCuponAdvice.java
                         |-----------com.nt.cfgs
                                             |---------------applicaitonContext.xml
                         |-----------com.nt.service
                                             |--------------ShoppingStore.java
                         |----------com.nt.test
                                             |--------------clientApp.java


--------------------------------------------------------------------------------------------------

UseCase: if target method returns ATM pin we can check weather that generated pin is weak pin or strong pin in afteradvice. if it is a weak pin then we display message.


  AOPproj5_SpringAOP_Decl_AfterAdvice_PinVerifier
                      |
                      src
                        |-------------------------com.nt.aspect
                                                          |----------CheckPinAdvice.java
                        |-------------------------com.nt.cfgs
                                                          |-----------applicationContext.xml
                       |---------------------com.nt.service
                                                        |------------PinGenerator.java
                       |------------------com.nt.test
                                                  |--------------ClientApp.java




===================================================
Note: Throws advice logic not only executes when exception is raised in target method. it also respond for the exception raised in other advicses configured on the target method.

AOPProj6(Spring AOP Decl Throw AdviceExcecutor)
         |
         src
          |--------------com.nt.aspect
                                    |-----------ExceptionLoggerAdvice.java
          |----------------com.nt.cfgs
                                   |----applicationContext.xml
           |-----------------com.nt.servcice
                                         |-------PriceCalculator.java
          |-----------------com.nt.test
                                |----------ClientApp.java




=> if exception is raised in terget method, control comes to throws advice and looks for after Throwing method in the following order

   Exact ExceptionType
  Super Class raised Excepiton type.

Note: if multiple after throwing method contains exact match the more params method executes.
Note: if multiple after Throwing method contains super class of raised exception then more params method executes

NOte : if 1 afterThrowing contains exact matching and another after Throwing contains super type then the exact match after throwing  will exected 























